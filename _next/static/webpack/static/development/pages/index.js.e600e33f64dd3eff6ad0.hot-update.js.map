{"version":3,"file":"static/webpack/static/development/pages/index.js.e600e33f64dd3eff6ad0.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useRef,\n  createRef,\n  useCallback,\n} from 'react'\nimport Head from 'next/head'\nimport Agent from '../components/agent'\nimport { key_des } from '../components/constants'\nimport * as _ from 'lodash'\nimport FlipMove from 'react-flip-move'\n\nlet scheme = {\n  name: 'Paraiso Dark',\n  bg: '#2f1e2e',\n  fg: '#bfbfbf',\n  light: '#777',\n  hues: ['#ef6155', '#65D6A3', '#fec418', '#53D1FA', '#BB91E2', '#5bc4bf'],\n}\nlet red = scheme.hues[0]\nlet green = scheme.hues[1]\nlet yellow = scheme.hues[2]\nlet teal = scheme.hues[3]\nlet purple = scheme.hues[4]\nlet blue = scheme.hues[5]\nlet bgs = [yellow, teal, green, purple]\nlet black = scheme.bg\n\nlet fs = 13\nlet lh = 1.5\nlet ch = 9.599990844726562\nlet cw = 8\nlet rlh = fs * lh\nlet cell = { w: ch, h: rlh / 2 }\n\nlet speeds = [640 * 2, 640, 320, 80, 40, 20]\n\nlet names = ['OCSVM', 'Autoencoder', 'Var Autoencoder', 'BiGAN']\n\nlet name_max = names.reduce((t, c) => {\n  return Math.max(c.length, t)\n}, 0)\n\nlet size = 4\n\nlet termheight = 4\n\nlet sort_options = ['accuracy', 'precision', 'recall']\n\nlet finish_line = 10000\n\nexport default function Index() {\n  let [data, setData] = useState(null)\n  let handler_ref = useRef(null)\n  let pref = useRef(null)\n  let sref = useRef(null)\n  let vref = useRef(null)\n  let href = useRef(null)\n  let rankref = useRef(null)\n  let [frame, setFrame] = useState(0)\n  let [pspace, setPspace] = useState(null)\n  let [pleft, setPleft] = useState(null)\n  let panels_ref = useRef([...Array(4)].map(n => [...Array(4)].map(n => 0)))\n  let ranksref = useRef([...Array(4)].map(n => createRef()))\n  let pdim_ref = useRef([])\n  let tdim_ref = useRef([])\n  let title_ref = useRef(null)\n  let readout_ref = useRef(null)\n  let truth_ref = useRef([0, 0])\n  let treadout_ref = useRef(null)\n  let ranklabel_ref = useRef(null)\n  let topbar_ref = useRef(null)\n  let [dpr, setDpr] = useState(1)\n  let icon_ref = useRef(null)\n  let con_ref = useRef(null)\n  let [speed, setSpeed] = useState(3)\n  let [initSpeed, setInitSpeed] = useState(false)\n  let [pause, setPause] = useState(false)\n  let [info, setInfo] = useState(false)\n  let [sort, setSort] = useState(0)\n  let [finish, setFinish] = useState(false)\n  let [ranks, setRanks] = useState(names.slice())\n\n  useEffect(() => {\n    if (data !== null) {\n      // set layout\n      let v = vref.current\n\n      let vwidth = pspace - 8\n      v.width = vwidth * dpr\n      v.style.marginLeft = pleft + 'px'\n      let vx = v.getContext('2d')\n      let pdim = pdim_ref.current\n      let tdim = tdim_ref.current\n\n      let columns = Math.floor(v.width / size)\n      let panel_columns = Math.floor(\n        Math.floor((v.width / dpr - size * 4) / size) / 2\n      )\n      let panel_rows = Math.ceil(10000 / (panel_columns - 2))\n\n      let pw = panel_columns * size\n      let ph = panel_rows * size\n\n      let pc = 2\n      let pr = 2\n\n      let top = rlh\n      let bottom = rlh * 2\n      let bottom_space = rlh / 2\n\n      let tc = panel_columns * 2 + 4\n      let tr = Math.ceil(10000 / (columns - 1))\n      let tw = tc * size\n      let th = tr * size\n      tdim_ref.current = [tw, th]\n\n      let vheight = (top + ph + bottom + bottom_space) * 2\n      v.height = vheight * dpr\n\n      v.style.width = vwidth + 'px'\n      v.style.height = vheight + 'px'\n\n      vx.scale(dpr, dpr)\n\n      let h = href.current\n      h.width = v.width\n      h.height = v.height\n      h.style.width = vwidth + 'px'\n      h.style.height = vheight + 'px'\n\n      let hx = h.getContext('2d')\n      hx.scale(dpr, dpr)\n\n      vx.fillStyle = '#eee'\n      for (let r = 0; r < pr; r++) {\n        for (let c = 0; c < pc; c++) {\n          let i = r * pc + c\n          let x = c * (pw + size * 4)\n          let y = r * (top + ph + bottom + bottom_space) + top\n          let w = pw\n          let h = ph\n          pdim[i] = [x, y, w, h]\n          vx.fillRect(x, y, w, h)\n        }\n      }\n\n      let $titles = title_ref.current\n      for (let r = 0; r < pr; r++) {\n        for (let c = 0; c < pc; c++) {\n          let $t = $titles.childNodes[r * pc + c]\n          $t.style.position = 'absolute'\n          $t.style.top = r * (top + ph + bottom + bottom_space) + 'px'\n          $t.style.width = pw + 'px'\n          $t.style.left = c * (pw + size * 4) + cw + 'px'\n        }\n      }\n\n      let $read = readout_ref.current\n      for (let r = 0; r < pr; r++) {\n        for (let c = 0; c < pc; c++) {\n          let $r = $read.childNodes[r * pc + c]\n          $r.style.position = 'absolute'\n          $r.style.top =\n            r * (top + ph + bottom + bottom_space) + top + ph + 'px'\n          $r.style.width = pw + 'px'\n          $r.style.left = c * (pw + size * 4) + cw + 'px'\n        }\n      }\n\n      let tb = topbar_ref.current\n      tb.style.width = tw + 'px'\n\n      let $rank = rankref.current\n      $rank.style.width = tw - cw + 'px'\n      ranklabel_ref.current.style.width = tw - cw + 'px'\n      for (let r = 0; r < ranksref.current.length; r++) {\n        ranksref.current[r].current.height = rlh + 1\n        ranksref.current[r].current.width = tw - cw\n      }\n\n      let icon = icon_ref.current\n      icon.width = cw * dpr\n      icon.height = rlh * 1.5 * dpr\n      let ix = icon.getContext('2d')\n      ix.scale(dpr, dpr)\n\n      // requestAnimationFrame() shim by Paul Irish\n      // http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n      window.requestAnimFrame = (function() {\n        return (\n          window.requestAnimationFrame ||\n          window.webkitRequestAnimationFrame ||\n          window.mozRequestAnimationFrame ||\n          window.oRequestAnimationFrame ||\n          window.msRequestAnimationFrame ||\n          function(/* function */ callback, /* DOMElement */ element) {\n            window.setTimeout(callback, 1000 / 60)\n          }\n        )\n      })()\n\n      // from https://gist.github.com/joelambert/1002116#gistcomment-1953925\n      /**\n       * Behaves the same as setInterval except uses requestAnimationFrame() where possible for better performance\n       * @param {function} fn The callback function\n       * @param {int} delay The delay in milliseconds\n       */\n      window.rInterval = function(fn, delay) {\n        if (\n          !window.requestAnimationFrame &&\n          !window.webkitRequestAnimationFrame &&\n          !(\n            window.mozRequestAnimationFrame &&\n            window.mozCancelRequestAnimationFrame\n          ) && // Firefox 5 ships without cancel support\n          !window.oRequestAnimationFrame &&\n          !window.msRequestAnimationFrame\n        )\n          return window.setInterval(fn, delay)\n\n        var start = new Date().getTime(),\n          handle = new Object()\n\n        function loop() {\n          var current = new Date().getTime(),\n            delta = current - start\n\n          if (delta >= delay) {\n            fn.call()\n            start = new Date().getTime()\n          }\n\n          handle.value = requestAnimFrame(loop)\n        }\n\n        handle.value = requestAnimFrame(loop)\n        return handle\n      }\n\n      /**\n       * Behaves the same as clearInterval except uses cancelRequestAnimationFrame() where possible for better performance\n       * @param {int|object} fn The callback function\n       */\n      window.clearRInterval = function(handle) {\n        window.cancelAnimationFrame\n          ? window.cancelAnimationFrame(handle.value)\n          : window.webkitCancelAnimationFrame\n          ? window.webkitCancelAnimationFrame(handle.value)\n          : window.webkitCancelRequestAnimationFrame\n          ? window.webkitCancelRequestAnimationFrame(\n              handle.value\n            ) /* Support for legacy API */\n          : window.mozCancelRequestAnimationFrame\n          ? window.mozCancelRequestAnimationFrame(handle.value)\n          : window.oCancelRequestAnimationFrame\n          ? window.oCancelRequestAnimationFrame(handle.value)\n          : window.msCancelRequestAnimationFrame\n          ? window.msCancelRequestAnimationFrame(handle.value)\n          : clearInterval(handle)\n      }\n\n      if (!pause && !info) {\n        handler_ref.current = window.rInterval(() => {\n          setFrame(function(prev) {\n            return prev + 1\n          })\n        }, speeds[speed])\n      }\n    } else {\n      if (handler_ref.current !== null) {\n        window.clearRInterval(handler_ref.current)\n      }\n    }\n    setInitSpeed(true)\n  }, [data])\n\n  useEffect(() => {\n    if (initSpeed != false) {\n      if (handler_ref.current !== null) {\n        window.clearRInterval(handler_ref.current)\n      }\n      if (!pause && !info) {\n        handler_ref.current = rInterval(() => {\n          setFrame(function(prev) {\n            return prev + 1\n          })\n        }, speeds[speed])\n      }\n    }\n  }, [speed, pause, info])\n\n  useEffect(() => {\n    if (data !== null) {\n      if (frame < data.length && frame < finish_line - 1) {\n        let panels = panels_ref.current\n        let $read = readout_ref.current\n        let pdim = pdim_ref.current\n\n        let v = vref.current\n        let vx = v.getContext('2d')\n\n        let h = href.current\n        let hx = h.getContext('2d')\n\n        // update panel data\n        let panel_keys = [19, 20, 21, 22]\n        let record = data[frame]\n        let anomaly = record[18] === 1 ? true : false\n\n        if (anomaly) {\n          vx.fillStyle = red\n        } else {\n          vx.fillStyle = scheme.bg\n        }\n\n        let pc = pdim[0][2] / size\n        let pr = pdim[0][3] / size\n\n        hx.clearRect(0, 0, h.width / dpr, h.height / dpr)\n\n        // let con = con_ref.current\n        // let records = data.data\n        //   .slice(Math.max(0, frame + 1 - termheight), frame + 1)\n        //   .reverse()\n        // for (let i = 0; i < records.length; i++) {\n        //   let rec = records[i]\n        //   let row = con.childNodes[i]\n        //   let anomaly = rec[19] === 1 ? true : false\n        //   row.childNodes[0]\n        //   let indicator = (row.childNodes[0].style.background = anomaly\n        //     ? red\n        //     : scheme.bg)\n        //   for (let j = 0; j < row.childNodes.length - 1; j++) {\n        //     let cell = row.childNodes[j + 1].childNodes[0]\n        //     if (j === 0) {\n        //       cell.innerHTML = frame + (termheight - i) - termheight + 1\n        //     } else {\n        //       if (cell.innerHTML !== rec[j]) {\n        //         cell.innerHTML = rec[j]\n        //       }\n        //     }\n        //   }\n        // }\n\n        for (let i = 0; i < panels.length; i++) {\n          let panel = panels[i]\n          let detected = record[panel_keys[i]]\n\n          let p1x, p1y\n          // TP FP TN FN\n          if (detected > 0.1) {\n            let n = panels[i][0] + panels[i][1]\n            p1y = (pr - (n % pr) - 1) * size\n            p1x = Math.floor(n / pr) * size\n            if (anomaly) {\n              // true pos\n              panels[i][0]++\n            } else {\n              // false pos\n              panels[i][1]++\n            }\n          } else {\n            let n = panels[i][2] + panels[i][3]\n            p1y = (pr - (n % pr) - 1) * size\n            p1x = (pc - Math.floor(n / pr) - 1) * size - 1\n            if (anomaly) {\n              // false neg\n              panels[i][3]++\n            } else {\n              // true neg\n              panels[i][2]++\n            }\n          }\n\n          let dim = pdim[i]\n          vx.fillRect(dim[0] + p1x, dim[1] + p1y, size + 1, size + 1)\n\n          // hx.fillStyle = '#433142'\n          hx.fillStyle = bgs[i]\n          hx.fillRect(\n            dim[0] + p1x - 2,\n            dim[1] + p1y - 2,\n            size + 1 + 4,\n            size + 1 + 4\n          )\n          hx.fillStyle = vx.fillStyle\n          hx.fillRect(dim[0] + p1x, dim[1] + p1y, size + 1, size + 1)\n\n          for (let j = 0; j < 4; j++) {\n            $read.childNodes[i].childNodes[j].childNodes[1].innerHTML = panel[j]\n          }\n\n          //accuracy = (TP+TN)/(TP+TN+FP+FN)\n          let accuracy = Math.round(\n            ((panel[0] + panel[2]) /\n              (panel[0] + panel[1] + panel[2] + panel[3])) *\n              100\n          )\n          // precision tp / (tp + fp)\n          let precision = Math.round((panel[0] / (panel[0] + panel[1])) * 100)\n\n          // recall tp / (tp + fn)\n          let recall = Math.round((panel[0] / (panel[0] + panel[3])) * 100)\n\n          // 4 5 6\n          panels[i][4] = accuracy\n          panels[i][5] = precision\n          panels[i][6] = recall\n        }\n\n        let vheight = v.height / dpr\n\n        // set rankings\n        let rank_rows = names.map((n, i) => {\n          let panel = panels[i]\n          return [i, n, panel[4], panel[5], panel[6]]\n        })\n\n        for (let r = 0; r < names.length; r++) {\n          let rc = ranksref.current[r].current.childNodes[0]\n          let rcx = rc.getContext('2d')\n          rcx.clearRect(0, 0, rc.width, rlh)\n          let row = rank_rows[r]\n          let h = rlh + 1\n          rcx.fillStyle = '#ccc'\n          let xstep = rc.width / dpr / 4\n          for (let c = 0; c < 3; c++) {\n            let x = (c + 1) * xstep\n            let w = (row[c + 2] / 100) * xstep - cw\n            if (w <= 0) w = 0\n            rcx.fillRect(x, 0, w, h)\n          }\n        }\n\n        rank_rows.sort(function(a, b) {\n          return b[2 + sort] - a[2 + sort]\n        })\n        setRanks(rank_rows.map(o => o[1]))\n      }\n\n      // finish line\n      if (frame >= finish_line - 1 + 10) {\n        window.clearRInterval(handler_ref.current)\n        setFinish(true)\n        setPause(true)\n      }\n    }\n  }, [data, frame, sort])\n\n  useEffect(() => {\n    let dpr = window.devicePixelRatio || 1\n    setDpr(dpr)\n\n    let p = pref.current\n    let pspace = p.offsetWidth\n    let pleft = p.offsetLeft\n    setPspace(pspace)\n    setPleft(pleft)\n\n    // get data\n    fetch('combined.json')\n      .then(r => r.json())\n      .then(_data => {\n        let formatted = _data.map(row =>\n          row.map(v => {\n            if (v.toString().indexOf('.') != -1) {\n              return Number.parseFloat(v).toFixed(2)\n            } else {\n              return parseInt(v)\n            }\n          })\n        )\n        let shuffled = _.shuffle(formatted)\n        setData(shuffled)\n      })\n  }, [])\n\n  return (\n    <div>\n      <Head>\n        <title>Blip</title>\n      </Head>\n\n      <div style={{ paddingLeft: '1ch', paddingRight: '1ch' }}>\n        <div ref={pref} />\n      </div>\n      <div\n        style={{\n          background: '#bbb',\n          height: rlh,\n          position: 'sticky',\n          top: 0,\n          zIndex: 999,\n        }}\n      >\n        <div\n          ref={topbar_ref}\n          style={{\n            display: 'flex',\n            paddingLeft: '2ch',\n          }}\n        >\n          <canvas\n            ref={icon_ref}\n            style={{\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              height: rlh,\n              width: '1ch',\n            }}\n          />\n          <div\n            style={{\n              position: 'relative',\n              marginRight: '1ch',\n            }}\n          >\n            BLIP\n          </div>\n          <button\n            onClick={() => {\n              setInfo(true)\n            }}\n          >\n            Info\n          </button>\n        </div>\n      </div>\n      {data ? (\n        <div>\n          <div\n            style={{\n              paddingLeft: '1ch',\n              paddingRight: '1ch',\n              marginTop: rlh / 2,\n              display: 'flex',\n            }}\n          >\n            <div>CONNECTIONS</div>\n            <div style={{ marginLeft: '1ch' }}>\n              <span style={{ color: '#777' }}>\n                {Math.min(frame, finish_line - 1) + 1}\n              </span>\n            </div>\n          </div>\n          <div style={{ width: '100%', overflow: 'auto' }}>\n            <div style={{ width: '100%', minWidth: 6 * 19 + 1 + 'ch' }}>\n              <div\n                style={{\n                  display: 'flex',\n                  paddingRight: '1ch',\n                  paddingLeft: '1ch',\n                }}\n              >\n                {key_des.map((k, i) => (\n                  <div\n                    style={{\n                      display: 'flex',\n                      paddingLeft: '1ch',\n                      flexGrow: 1,\n                    }}\n                    title={k[0] + ': ' + k[2]}\n                  >\n                    <div\n                      style={{\n                        width: '5ch',\n                        overflow: 'hidden',\n                        textAlign: 'right',\n                        fontStyle: 'italic',\n                      }}\n                    >\n                      {k[1]}\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div\n                style={{\n                  paddingRight: '1ch',\n                  height: rlh * termheight,\n                  background: scheme.bg,\n                  background: '#433142',\n                  color: scheme.fg,\n                }}\n                ref={con_ref}\n              >\n                {data\n                  .slice(\n                    Math.max(\n                      Math.min(frame, finish_line - 1) - termheight + 1,\n                      0\n                    ),\n                    Math.min(frame, finish_line - 1) + 1\n                  )\n                  .reverse()\n                  .map((d, i) => (\n                    <div\n                      key={frame + (termheight - i) - termheight + 1}\n                      style={{\n                        position: 'relative',\n                        display: 'flex',\n                        paddingLeft: '1ch',\n                      }}\n                    >\n                      <div\n                        style={{\n                          position: 'absolute',\n                          top: rlh / 2 - (size + 1) / 2 - 1,\n                          left: cw / 2 - (size + 1) / 2 + cw,\n                          height: size + 1,\n                          width: size + 1,\n                          background: d[18] ? red : scheme.bg,\n                        }}\n                      />\n                      <div\n                        style={{\n                          display: 'flex',\n                          paddingLeft: '1ch',\n                          flexGrow: 1,\n                          position: 'relative',\n                        }}\n                      >\n                        <div\n                          style={{\n                            width: '5ch',\n                            overflow: 'hidden',\n                            textAlign: 'right',\n                          }}\n                        >\n                          {Math.min(frame, finish_line - 1) +\n                            (termheight - i) -\n                            termheight}\n                        </div>\n                      </div>\n                      {d.slice(0, 18).map((d, j) => (\n                        <div\n                          style={{\n                            display: 'flex',\n                            paddingLeft: '1ch',\n                            flexGrow: 1,\n                            position: 'relative',\n                          }}\n                        >\n                          <div\n                            style={{\n                              width: '5ch',\n                              overflow: 'hidden',\n                              textAlign: 'right',\n                            }}\n                          >\n                            {d}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ))}\n              </div>\n            </div>\n          </div>\n          <div\n            style={{\n              paddingLeft: '1ch',\n              paddingRight: '1ch',\n              marginTop: rlh / 2,\n            }}\n          >\n            STRATEGIES\n          </div>\n          <div\n            ref={ranklabel_ref}\n            style={{\n              marginLeft: '1ch',\n              fontStyle: 'italic',\n              display: 'flex',\n            }}\n          >\n            <div style={{ width: '100%' }}>Ranking</div>\n            {[\n              [\n                'Accuracy',\n                '(TP+TN)/ALL',\n                '(True Positive + True Negative) / ALL',\n              ],\n              [\n                'Precision',\n                'TP/(TP+FP)',\n                'True Positive / (True Positive + False Positive)',\n              ],\n              [\n                'Recall',\n                'TP/(TP+FN)',\n                'True Positive / (True Positive + False Negative)',\n              ],\n            ].map((n, i) => (\n              <div style={{ width: '100%' }}>\n                {sort === i ? (\n                  <span title={`Rankings sorted by ${sort_options[i]}`}>\n                    {n[0]}\n                  </span>\n                ) : (\n                  <button\n                    title={`Click to sort by ${sort_options[i]}`}\n                    onClick={() => {\n                      setSort(i)\n                    }}\n                    style={{ fontStyle: 'italic' }}\n                  >\n                    {n[0]}\n                  </button>\n                )}{' '}\n                <span\n                  style={{ color: scheme.light, fontStyle: 'normal' }}\n                  title={n[2]}\n                >\n                  {n[1]}\n                </span>\n              </div>\n            ))}\n          </div>\n          <div\n            ref={rankref}\n            style={{\n              position: 'relative',\n              marginLeft: '1ch',\n            }}\n          >\n            <div style={{ position: 'absolute', left: 0, top: 0 }}>\n              {[...Array(4)].map((n, i) => (\n                <div style={{}}>{i + 1}</div>\n              ))}\n            </div>\n            <FlipMove>\n              {ranks.map((name, i) => (\n                <div key={name}>\n                  <div\n                    ref={ranksref.current[names.indexOf(name)]}\n                    style={{\n                      display: 'flex',\n                      position: 'relative',\n                    }}\n                  >\n                    <canvas\n                      style={{\n                        position: 'absolute',\n                        left: 0,\n                        top: 0,\n                      }}\n                    />\n                    <div style={{ width: '100%', position: 'relative' }}>\n                      <div\n                        style={{\n                          display: 'inline-block',\n                          marginLeft: '2ch',\n                          paddingLeft: '0.5ch',\n                          paddingRight: '0.5ch',\n                          background: bgs[names.indexOf(name)],\n                        }}\n                      >\n                        {name}\n                      </div>\n                    </div>\n                    <div style={{ width: '100%', position: 'relative' }}>\n                      what up\n                    </div>\n                    <div style={{ width: '100%', position: 'relative' }}>\n                      what up\n                    </div>\n                    <div style={{ width: '100%', position: 'relative' }}>\n                      what up\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </FlipMove>\n          </div>\n          <div\n            style={{\n              paddingLeft: '1ch',\n              paddingRight: '1ch',\n              marginTop: rlh / 2,\n            }}\n          >\n            VISUALIZED\n          </div>\n\n          <div style={{ position: 'relative' }}>\n            <canvas ref={vref} style={{}} />\n            <canvas\n              ref={href}\n              style={{ position: 'absolute', left: '1ch', top: 0 }}\n            />\n            <div\n              style={{ position: 'absolute', left: 0, top: 0 }}\n              ref={title_ref}\n            >\n              {names.map((n, i) => (\n                <div\n                  style={{\n                    background: bgs[i],\n                    paddingLeft: '0.5ch',\n                    paddingRight: '0.5ch',\n                  }}\n                >\n                  {n}\n                </div>\n              ))}\n            </div>\n            <div\n              style={{\n                position: 'absolute',\n                left: 0,\n                top: 0,\n              }}\n              ref={readout_ref}\n            >\n              {[...Array(4)].map(() => (\n                <div style={{ display: 'flex' }}>\n                  {[\n                    ['True Pos', red],\n                    ['False Pos', black],\n                    ['True Neg', black],\n                    ['False Neg', red],\n                  ].map((o, i) => (\n                    <div\n                      style={{ width: '100%', marginLeft: i === 2 ? '1ch' : 0 }}\n                    >\n                      <div\n                        style={{\n                          background: scheme.fg,\n                          fontStyle: 'italic',\n                        }}\n                      >\n                        {o[0]}\n                      </div>\n                      <div\n                        style={{\n                          background: o[1],\n                          height: rlh,\n                          color: 'white',\n                          textAlign: 'right',\n                          paddingRight: '1ch',\n                        }}\n                      ></div>\n                    </div>\n                  ))}\n                </div>\n              ))}\n            </div>\n          </div>\n          <div\n            style={{\n              paddingLeft: '1ch',\n              paddingRight: '1ch',\n              marginTop: 0,\n              marginBottom: rlh / 2 + rlh,\n            }}\n          >\n            Blip is an anomaly detection prototype by{' '}\n            <a href=\"https://www.cloudera.com/products/fast-forward-labs-research.html\">\n              Cloudera Fast Forward\n            </a>\n            .\n          </div>\n          <div\n            style={{\n              position: 'fixed',\n              left: 0,\n              bottom: 0,\n              right: 0,\n              height: rlh,\n              background: '#bbb',\n              paddingLeft: '1ch',\n              display: 'flex',\n            }}\n          >\n            {frame + 1 <= finish_line ? (\n              <div\n                style={{\n                  display: 'flex',\n                }}\n              >\n                <div>Speed:</div>\n                <button\n                  style={{\n                    paddingLeft: '0.25ch',\n                    paddingRight: '0.25ch',\n                    marginLeft: '0.5ch',\n                  }}\n                  onClick={() => {\n                    if (speed > 0) {\n                      setSpeed(speed - 1)\n                    }\n                  }}\n                >\n                  {'<'}\n                </button>\n                {speeds.map((n, i) =>\n                  i == speed ? (\n                    <div\n                      style={{\n                        paddingLeft: '0.25ch',\n                        paddingRight: '0.25ch',\n                      }}\n                    >\n                      {i + 1}\n                    </div>\n                  ) : (\n                    <button\n                      onClick={() => {\n                        setSpeed(i)\n                      }}\n                      style={{\n                        paddingLeft: '0.25ch',\n                        paddingRight: '0.25ch',\n                        color: scheme.light,\n                      }}\n                    >\n                      {i + 1}\n                    </button>\n                  )\n                )}\n                <button\n                  style={{\n                    paddingLeft: '0.25ch',\n                    paddingRight: '0.25ch',\n                  }}\n                  onClick={() => {\n                    if (speed < speeds.length - 1) {\n                      setSpeed(speed + 1)\n                    }\n                  }}\n                >\n                  {'>'}\n                </button>\n              </div>\n            ) : null}\n            {frame + 1 <= finish_line ? (\n              pause ? (\n                <button\n                  style={{ marginLeft: '2ch' }}\n                  onClick={() => {\n                    setPause(false)\n                  }}\n                >\n                  Play\n                </button>\n              ) : (\n                <button\n                  style={{ marginLeft: '2ch' }}\n                  onClick={() => {\n                    setPause(true)\n                  }}\n                >\n                  Pause\n                </button>\n              )\n            ) : null}\n            {pause && frame + 1 <= finish_line ? (\n              <button\n                style={{ marginLeft: '2ch' }}\n                onClick={() => {\n                  setFrame(function(prev) {\n                    return prev + 1\n                  })\n                }}\n              >\n                Tick\n              </button>\n            ) : null}\n          </div>\n          {info ? (\n            <div\n              style={{\n                position: 'fixed',\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0,\n                zIndex: 999,\n                background: 'rgba(0,0,0,0.2)',\n              }}\n              onClick={() => {\n                setInfo(false)\n              }}\n            >\n              <div\n                onClick={e => {\n                  e.stopPropagation()\n                }}\n                style={{\n                  width: '80ch',\n                  maxWidth: '100%',\n                  background: scheme.bg,\n                  color: scheme.fg,\n                  marginLeft: 'auto',\n                  marginRight: 'auto',\n                  marginTop: rlh * 1.5,\n                  marginBottom: rlh * 1.5,\n                }}\n              >\n                <div\n                  style={{\n                    paddingLeft: '1ch',\n                    paddingRight: '1ch',\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                  }}\n                >\n                  <div>Info</div>\n                  <button\n                    onClick={() => {\n                      setInfo(false)\n                    }}\n                  >\n                    X\n                  </button>\n                </div>\n                <div\n                  style={{\n                    background: '#fff',\n                    paddingTop: rlh / 2,\n                    paddingLeft: '1ch',\n                    paddingRight: '1ch',\n                    color: scheme.bg,\n                    paddingBottom: rlh / 2,\n                  }}\n                >\n                  <div style={{ fontStyle: 'italic', marginBottom: rlh / 2 }}>\n                    Blip is a prototype by{' '}\n                    <a href=\"https://www.cloudera.com/products/fast-forward-labs-research.html\">\n                      Cloudera Fast Forward\n                    </a>{' '}\n                    built to accompany our{' '}\n                    <a href=\"https://ff12.fastforwardlabs.com\">\n                      report on Deep Learning for Anomaly Detection\n                    </a>\n                    .\n                  </div>\n                  <div style={{ marginBottom: rlh / 2 }}>\n                    Blip shows how four different algorithms (\n                    {names.map((n, i) => (\n                      <span>\n                        <span\n                          style={{\n                            background: bgs[i],\n                            paddingLeft: '0.5ch',\n                            paddingRight: '0.5ch',\n                          }}\n                        >\n                          {n}\n                        </span>\n                        {i != names.length - 1 ? <span>, </span> : null}\n                      </span>\n                    ))}\n                    ) perform at detecting network attacks in the{' '}\n                    <a href=\"http://kdd.ics.uci.edu/databases/kddcup99/task.html\">\n                      KDD network intrusion dataset\n                    </a>\n                    . You can read about how each model was trained in the{' '}\n                    <a href=\"#\">protototype section of our report</a>.\n                  </div>\n                  <div style={{ marginBottom: rlh / 2 }}>\n                    The top CONNECTIONS section shows the{' '}\n                    <span\n                      style={{\n                        paddingLeft: '0.5ch',\n                        paddingRight: '0.5ch',\n                        background: '#433142',\n                        color: '#fff',\n                      }}\n                    >\n                      network connections\n                    </span>{' '}\n                    coming in, with the features used by each model for their\n                    prediction. The color of the square shows the true status of\n                    whether the connection is an{' '}\n                    <span\n                      style={{\n                        background: red,\n                        paddingLeft: '0.5ch',\n                        paddingRight: '0.5ch',\n                      }}\n                    >\n                      attack\n                    </span>{' '}\n                    or{' '}\n                    <span\n                      style={{\n                        background: scheme.bg,\n                        color: scheme.fg,\n                        paddingLeft: '0.5ch',\n                        paddingRight: '0.5ch',\n                      }}\n                    >\n                      normal\n                    </span>\n                    .\n                  </div>\n                  <div style={{ marginBottom: rlh / 2 }}>\n                    The STRATEGIES section shows metrics on how each algorithm\n                    is peforming on the incoming data. You can see the accuracy,\n                    recall, and precision metrics for each strategy.\n                  </div>\n                  <div style={{ marginBottom: rlh / 2 }}>\n                    The VISUALIZED section provides another view of each\n                    strategy's performance. Each connection is visualized as a\n                    square. If it is classified as an attack it is placed on the\n                    left; if classified normal, it is placed on the right. The\n                    color reveals its true status. Over time the density and\n                    position of the colors in each strategy visualization give\n                    you a feel for the different models strengths and\n                    weaknesses.\n                  </div>\n                  <div style={{ marginBottom: rlh / 2 }}>\n                    The simulation will run through 10,000 connections before\n                    finishing. You can control the speed of the simulation with\n                    the controls at the bottom.\n                  </div>\n                  {frame != finish_line - 1 ? (\n                    <div style={{ textAlign: 'right' }}>\n                      <button\n                        style={{\n                          background: scheme.bg,\n                          color: '#fff',\n                          paddingLeft: '0.5ch',\n                          paddingRight: '0.5ch',\n                        }}\n                        onClick={() => {\n                          setInfo(false)\n                        }}\n                      >\n                        Start the simulation\n                      </button>\n                    </div>\n                  ) : null}\n                </div>\n              </div>\n            </div>\n          ) : null}\n          {finish ? (\n            <div\n              style={{\n                position: 'fixed',\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0,\n                zIndex: 999,\n                background: 'rgba(0,0,0,0.2)',\n              }}\n              onClick={() => {\n                setFinish(false)\n              }}\n            >\n              <div\n                onClick={e => {\n                  e.stopPropagation()\n                }}\n                style={{\n                  width: '80ch',\n                  maxWidth: '100%',\n                  background: scheme.bg,\n                  color: scheme.fg,\n                  marginLeft: 'auto',\n                  marginRight: 'auto',\n                  marginTop: rlh * 1.5,\n                  marginBottom: rlh * 1.5,\n                }}\n              >\n                <div\n                  style={{\n                    paddingLeft: '1ch',\n                    paddingRight: '1ch',\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                  }}\n                >\n                  <div>Finished</div>\n                  <button\n                    onClick={() => {\n                      setFinish(false)\n                    }}\n                  >\n                    X\n                  </button>\n                </div>\n                <div\n                  style={{\n                    background: '#fff',\n                    paddingTop: rlh / 2,\n                    paddingLeft: '1ch',\n                    paddingRight: '1ch',\n                    color: scheme.bg,\n                    paddingBottom: rlh / 2,\n                  }}\n                >\n                  <div style={{ marginBottom: rlh / 2 }}>\n                    After {finish_line} connections, you've reached the end of\n                    the anomaly detection simulation.\n                  </div>\n                  <div style={{ marginBottom: rlh / 2 }}>\n                    The final standings:\n                  </div>\n\n                  <div\n                    style={{\n                      display: 'flex',\n                      fontStyle: 'italic',\n                    }}\n                  >\n                    {['Ranking', 'Accuracy', 'Precision', 'Recall'].map(n => (\n                      <div style={{ width: '100%' }}>{n}</div>\n                    ))}\n                  </div>\n\n                  <div style={{ marginBottom: rlh }}>\n                    {names\n                      .map((n, i) => {\n                        let panel = panels_ref.current[i]\n                        return [i, n, panel[4], panel[5], panel[6]]\n                      })\n                      .sort(function(a, b) {\n                        return b[2 + sort] - a[2 + sort]\n                      })\n                      .map((r, i) => (\n                        <div style={{ display: 'flex' }}>\n                          <div style={{ width: '100%' }}>\n                            {i + 1}{' '}\n                            <span\n                              style={{\n                                background: bgs[r[0]],\n                                display: 'inline-block',\n                                paddingLeft: '0.5ch',\n                                paddingRight: '0.5ch',\n                              }}\n                            >\n                              {r[1]}\n                            </span>\n                          </div>\n\n                          {[r[2], r[3], r[4]].map(v => (\n                            <div\n                              style={{\n                                width: '100%',\n                                position: 'relative',\n                                paddingLeft: '0.5ch',\n                              }}\n                            >\n                              <div\n                                style={{\n                                  position: 'absolute',\n                                  left: 0,\n                                  top: 0,\n                                  height: rlh,\n                                  background: '#ccc',\n                                  width: `calc(${v}% - 1ch)`,\n                                }}\n                              />\n                              <div style={{ position: 'relative' }}>{v}%</div>\n                            </div>\n                          ))}\n                        </div>\n                      ))}\n                  </div>\n\n                  <div>\n                    Read more about the models and their performance on the full\n                    dataset in{' '}\n                    <a href=\"#\">the prototype section of our report</a>.\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : null}\n        </div>\n      ) : (\n        <div>loading...</div>\n      )}\n      <style global jsx>{`\n        @font-face {\n          font-family: 'custom';\n          src: url('/fonts/IBMPlexMono-Regular.woff2') format('woff2'),\n            url('/fonts/IBMPlexMono-Regular.woff') format('woff');\n        }\n        @font-face {\n          font-family: 'custom';\n          src: url('/fonts/IBMPlexMono-Italic.woff2') format('woff2'),\n            url('/fonts/IBMPlexMono-Italic.woff') format('woff');\n          font-style: italic;\n        }\n        * {\n          box-sizing: border-box;\n        }\n        html {\n          font-family: 'custom', sans-serif;\n          font-size: ${fs}px;\n          line-height: ${lh};\n          background: #ddd;\n          color: #000;\n          overflow-x: hidden;\n        }\n        body {\n          margin: 0;\n          padding: 0;\n        }\n        canvas {\n          display: block;\n        }\n        h1,\n        h2,\n        h3,\n        h4,\n        h5,\n        h6 {\n          margin: 0;\n          font-size: inherit;\n          line-height: inherit;\n          font-weight: normal;\n        }\n        p {\n          margin: 0;\n          margin-top: ${rlh}px;\n        }\n        img {\n          display: block;\n          width: 100%;\n        }\n        a {\n          color: inherit;\n        }\n        a:hover {\n          opacity: 0.8;\n        }\n        #__next-prerender-indicator {\n          display: none;\n        }\n        button {\n          font-family: inherit;\n          color: inherit;\n          text-decoration: underline;\n          background: none;\n          border: none;\n          padding: 0;\n          margin: 0;\n          cursor: pointer;\n        }\n      `}</style>\n    </div>\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AACA;AAqBA;AACA;AACA;AAxBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AA+BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;AAKA;AACA;AAOA;AAKA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AAOA;AAHA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAQA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA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","sourceRoot":""}