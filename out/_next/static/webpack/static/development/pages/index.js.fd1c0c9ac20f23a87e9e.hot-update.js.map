{"version":3,"file":"static/webpack/static/development/pages/index.js.fd1c0c9ac20f23a87e9e.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useRef,\n  createRef,\n  useCallback,\n} from 'react'\nimport Head from 'next/head'\nimport Agent from '../components/agent'\nimport { key_des } from '../components/constants'\nimport * as _ from 'lodash'\n\nlet scheme = {\n  name: 'Paraiso Dark',\n  bg: '#2f1e2e',\n  fg: '#bfbfbf',\n  light: '#777',\n  hues: ['#ef6155', '#65D6A3', '#fec418', '#53D1FA', '#BB91E2', '#5bc4bf'],\n}\nlet red = scheme.hues[0]\nlet green = scheme.hues[1]\nlet yellow = scheme.hues[2]\nlet teal = scheme.hues[3]\nlet purple = scheme.hues[4]\nlet blue = scheme.hues[5]\nlet bgs = [yellow, teal, green, purple]\nlet black = scheme.bg\n\nlet fs = 13\nlet lh = 1.5\nlet ch = 9.599990844726562\nlet cw = 8\nlet rlh = fs * lh\nlet cell = { w: ch, h: rlh / 2 }\n\nlet speeds = [640, 320, 160, 80, 40, 20]\n\nlet names = [\n  'Autoencoder',\n  'Var. Autoencoder',\n  'Autoencoder',\n  'Var. Autoencoder',\n]\n\nlet size = 4\n\nlet termheight = 4\n\nlet sort_options = ['accuracy', 'precision', 'recall']\n\nexport default function Index() {\n  let [data, setData] = useState(null)\n  let handler_ref = useRef(null)\n  let pref = useRef(null)\n  let sref = useRef(null)\n  let vref = useRef(null)\n  let href = useRef(null)\n  let rankref = useRef(null)\n  let [frame, setFrame] = useState(0)\n  let [pspace, setPspace] = useState(null)\n  let [pleft, setPleft] = useState(null)\n  let panels_ref = useRef([...Array(4)].map(n => [...Array(4)].map(n => 0)))\n  let pdim_ref = useRef([])\n  let tdim_ref = useRef([])\n  let title_ref = useRef(null)\n  let readout_ref = useRef(null)\n  let truth_ref = useRef([0, 0])\n  let treadout_ref = useRef(null)\n  let truthtitle_ref = useRef(null)\n  let ranklabel_ref = useRef(null)\n  let topbar_ref = useRef(null)\n  let [dpr, setDpr] = useState(1)\n  let icon_ref = useRef(null)\n  let [speed, setSpeed] = useState(3)\n  let [initSpeed, setInitSpeed] = useState(false)\n  let [pause, setPause] = useState(false)\n\n  useEffect(() => {\n    if (data !== null) {\n      // set layout\n      let v = vref.current\n\n      let vwidth = pspace - 8\n      v.width = vwidth * dpr\n      v.style.marginLeft = pleft + 'px'\n      let vx = v.getContext('2d')\n      let pdim = pdim_ref.current\n      let tdim = tdim_ref.current\n\n      let columns = Math.floor(v.width / size)\n      let panel_columns = Math.floor(\n        Math.floor((v.width / dpr - size * 4) / size) / 2\n      )\n      let panel_rows = Math.ceil(10000 / (panel_columns - 1))\n\n      let pw = panel_columns * size\n      let ph = panel_rows * size\n\n      let pc = 2\n      let pr = 2\n\n      let top = rlh\n      let bottom = rlh * 2\n      let bottom_space = rlh / 2\n\n      let tc = panel_columns * 2 + 4\n      let tr = Math.ceil(10000 / (columns - 1))\n      let tw = tc * size\n      let th = tr * size\n      tdim_ref.current = [tw, th]\n\n      let vheight =\n        (top + ph + bottom + bottom_space) * 2 + top + bottom + bottom_space\n      v.height = vheight * dpr\n\n      v.style.width = vwidth + 'px'\n      v.style.height = vheight + 'px'\n\n      vx.scale(dpr, dpr)\n\n      let h = href.current\n      h.width = v.width\n      h.height = v.height\n      h.style.width = vwidth + 'px'\n      h.style.height = vheight + 'px'\n\n      let $rank = rankref.current\n      $rank.style.width = tw + 'px'\n      $rank.style.left = pleft + 'px'\n      let s = sref.current\n      let swidth = tw\n      let sheight = rlh * 4\n      s.width = swidth * dpr\n      s.height = sheight * dpr\n      s.style.width = swidth + 'px'\n      s.style.height = sheight + 'px'\n      let sx = s.getContext('2d')\n      sx.scale(dpr, dpr)\n\n      let ranklabel = ranklabel_ref.current\n      ranklabel.style.width = tw + 'px'\n\n      vx.fillStyle = '#eee'\n      for (let r = 0; r < pr; r++) {\n        for (let c = 0; c < pc; c++) {\n          let i = r * pc + c\n          let x = c * (pw + size * 4)\n          let y = r * (top + ph + bottom + bottom_space) + top\n          let w = pw\n          let h = ph\n          pdim[i] = [x, y, w, h]\n          vx.fillRect(x, y, w, h)\n        }\n      }\n\n      let $titles = title_ref.current\n      for (let r = 0; r < pr; r++) {\n        for (let c = 0; c < pc; c++) {\n          let $t = $titles.childNodes[r * pc + c]\n          $t.style.position = 'absolute'\n          $t.style.top = r * (top + ph + bottom + bottom_space) + 'px'\n          $t.style.width = pw + 'px'\n          $t.style.left = c * (pw + size * 4) + cw + 'px'\n        }\n      }\n\n      let tt = truthtitle_ref.current\n      tt.style.width = tw + 'px'\n      tt.style.left = cw + 'px'\n      tt.style.top = 2 * (top + ph + bottom + bottom_space) + 'px'\n\n      let $read = readout_ref.current\n      for (let r = 0; r < pr; r++) {\n        for (let c = 0; c < pc; c++) {\n          let $r = $read.childNodes[r * pc + c]\n          $r.style.position = 'absolute'\n          $r.style.top =\n            r * (top + ph + bottom + bottom_space) + top + ph + 'px'\n          $r.style.width = pw + 'px'\n          $r.style.left = c * (pw + size * 4) + cw + 'px'\n        }\n      }\n\n      let tre = treadout_ref.current\n      tre.style.width = tw + 'px'\n      tre.style.left = cw + 'px'\n      tre.style.top = 2 * (top + ph + bottom + bottom_space) + rlh + 'px'\n\n      let tb = topbar_ref.current\n      tb.style.width = tw + 'px'\n\n      let icon = icon_ref.current\n      icon.width = cw * dpr\n      icon.height = rlh * 1.5 * dpr\n      let ix = icon.getContext('2d')\n      ix.scale(dpr, dpr)\n\n      // requestAnimationFrame() shim by Paul Irish\n      // http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n      window.requestAnimFrame = (function() {\n        return (\n          window.requestAnimationFrame ||\n          window.webkitRequestAnimationFrame ||\n          window.mozRequestAnimationFrame ||\n          window.oRequestAnimationFrame ||\n          window.msRequestAnimationFrame ||\n          function(/* function */ callback, /* DOMElement */ element) {\n            window.setTimeout(callback, 1000 / 60)\n          }\n        )\n      })()\n\n      // from https://gist.github.com/joelambert/1002116#gistcomment-1953925\n      /**\n       * Behaves the same as setInterval except uses requestAnimationFrame() where possible for better performance\n       * @param {function} fn The callback function\n       * @param {int} delay The delay in milliseconds\n       */\n      window.rInterval = function(fn, delay) {\n        if (\n          !window.requestAnimationFrame &&\n          !window.webkitRequestAnimationFrame &&\n          !(\n            window.mozRequestAnimationFrame &&\n            window.mozCancelRequestAnimationFrame\n          ) && // Firefox 5 ships without cancel support\n          !window.oRequestAnimationFrame &&\n          !window.msRequestAnimationFrame\n        )\n          return window.setInterval(fn, delay)\n\n        var start = new Date().getTime(),\n          handle = new Object()\n\n        function loop() {\n          var current = new Date().getTime(),\n            delta = current - start\n\n          if (delta >= delay) {\n            fn.call()\n            start = new Date().getTime()\n          }\n\n          handle.value = requestAnimFrame(loop)\n        }\n\n        handle.value = requestAnimFrame(loop)\n        return handle\n      }\n\n      /**\n       * Behaves the same as clearInterval except uses cancelRequestAnimationFrame() where possible for better performance\n       * @param {int|object} fn The callback function\n       */\n      window.clearRInterval = function(handle) {\n        window.cancelAnimationFrame\n          ? window.cancelAnimationFrame(handle.value)\n          : window.webkitCancelAnimationFrame\n          ? window.webkitCancelAnimationFrame(handle.value)\n          : window.webkitCancelRequestAnimationFrame\n          ? window.webkitCancelRequestAnimationFrame(\n              handle.value\n            ) /* Support for legacy API */\n          : window.mozCancelRequestAnimationFrame\n          ? window.mozCancelRequestAnimationFrame(handle.value)\n          : window.oCancelRequestAnimationFrame\n          ? window.oCancelRequestAnimationFrame(handle.value)\n          : window.msCancelRequestAnimationFrame\n          ? window.msCancelRequestAnimationFrame(handle.value)\n          : clearInterval(handle)\n      }\n\n      handler_ref.current = window.rInterval(() => {\n        setFrame(function(prev) {\n          return prev + 1\n        })\n      }, speeds[speed])\n    } else {\n      if (handler_ref.current !== null) {\n        window.clearRInterval(handler_ref.current)\n      }\n    }\n    setInitSpeed(true)\n  }, [data])\n\n  useEffect(() => {\n    if (initSpeed != false) {\n      if (handler_ref.current !== null) {\n        window.clearRInterval(handler_ref.current)\n      }\n      handler_ref.current = rInterval(() => {\n        setFrame(function(prev) {\n          return prev + 1\n        })\n      }, speeds[speed])\n    }\n  }, [speed])\n\n  useEffect(() => {\n    if (initSpeed != false) {\n      if (pause === true) {\n        if (handler_ref.current !== null) {\n          window.clearRInterval(handler_ref.current)\n        }\n      } else {\n        handler_ref.current = rInterval(() => {\n          setFrame(function(prev) {\n            return prev + 1\n          })\n        }, speeds[speed])\n      }\n    }\n  }, [pause])\n\n  useEffect(() => {\n    if (data !== null) {\n      let panels = panels_ref.current\n      let $read = readout_ref.current\n      let truth = truth_ref.current\n      let $truth = treadout_ref.current\n      let pdim = pdim_ref.current\n\n      let v = vref.current\n      let vx = v.getContext('2d')\n\n      // update panel data\n      let panel_keys = [21, 20, 21, 20]\n      let record = data.data[frame]\n      let anomaly = record[19] === 1 ? true : false\n\n      if (anomaly) {\n        vx.fillStyle = red\n        truth[0]++\n      } else {\n        vx.fillStyle = scheme.bg\n        truth[1]++\n      }\n      $truth.childNodes[0].childNodes[1].innerHTML = truth[0]\n      $truth.childNodes[1].childNodes[1].innerHTML = truth[1]\n\n      let pc = pdim[0][2] / size\n      let pr = pdim[0][3] / size\n\n      for (let i = 0; i < panels.length; i++) {\n        let panel = panels[i]\n        let detected = record[panel_keys[i]]\n\n        let p1x, p1y\n        // TP FP TN FN\n        if (detected > 0.1) {\n          let n = panels[i][0] + panels[i][1]\n          p1y = (pr - (n % pr) - 1) * size\n          p1x = Math.floor(n / pr) * size\n          if (anomaly) {\n            // true pos\n            panels[i][0]++\n          } else {\n            // false pos\n            panels[i][1]++\n          }\n        } else {\n          let n = panels[i][2] + panels[i][3]\n          p1y = (pr - (n % pr) - 1) * size\n          p1x = (pc - Math.floor(n / pr) - 1) * size - 1\n          if (anomaly) {\n            // false neg\n            panels[i][3]++\n          } else {\n            // true neg\n            panels[i][2]++\n          }\n        }\n\n        let dim = pdim[i]\n        vx.fillRect(dim[0] + p1x, dim[1] + p1y, size + 1, size + 1)\n\n        for (let j = 0; j < 4; j++) {\n          $read.childNodes[i].childNodes[j].childNodes[1].innerHTML = panel[j]\n        }\n\n        //accuracy = (TP+TN)/(TP+TN+FP+FN)\n        let accuracy = Math.round(\n          ((panel[0] + panel[2]) /\n            (panel[0] + panel[1] + panel[2] + panel[3])) *\n            100\n        )\n        // precision tp / (tp + fp)\n        let precision = Math.round((panel[0] / (panel[0] + panel[1])) * 100)\n\n        // recall tp / (tp + fn)\n        let recall = Math.round((panel[0] / (panel[0] + panel[3])) * 100)\n\n        // 4 5 6\n        panels[i][4] = accuracy\n        panels[i][5] = precision\n        panels[i][6] = recall\n      }\n\n      let vheight = v.height / dpr\n      let [tw, th] = tdim_ref.current\n      vx.clearRect(0, vheight - rlh * 2 - 1, tw, rlh + 2)\n      let split = truth[1] / (truth[0] + truth[1])\n      vx.fillStyle = red\n      vx.fillRect(0, vheight - rlh * 1.5, tw - tw * split, rlh)\n      vx.fillStyle = scheme.bg\n      vx.fillRect(tw - tw * split - 1, vheight - rlh * 1.5, tw * split, rlh)\n\n      // set rankings\n      {\n        let $rs = rankref.current.childNodes\n        let s = sref.current\n        let sx = s.getContext('2d')\n        sx.clearRect(0, 0, s.width / dpr, s.height / dpr)\n\n        let rank_rows = names.map((n, i) => {\n          let panel = panels[i]\n          return [i, n, panel[4], panel[5], panel[6]]\n        })\n        rank_rows.sort(function(a, b) {\n          return b[2] - a[2]\n        })\n        for (let i = 0; i < rank_rows.length; i++) {\n          let row = rank_rows[i]\n          let panel = panels[row[0]]\n          let [TP, FP, TN, FN] = panel\n          let $r = $rs[i]\n          let total = panel[0] + panel[1] + panel[2] + panel[3]\n          $r.childNodes[0].childNodes[0].style.background = bgs[row[0]]\n          $r.childNodes[0].childNodes[0].innerHTML = row[1]\n          $r.childNodes[1].childNodes[0].innerHTML = row[2] + '% '\n          $r.childNodes[1].childNodes[1].innerHTML = `(${TP}+${TN})/${total}`\n          $r.childNodes[2].childNodes[0].innerHTML = row[3] + '% '\n          $r.childNodes[2].childNodes[1].innerHTML = `${TP}/(${TP}+${FP})`\n          $r.childNodes[3].childNodes[0].innerHTML = row[4] + '% '\n          $r.childNodes[3].childNodes[1].innerHTML = `${TP}/(${TP}+${FN})`\n\n          let y = i * rlh\n          let w = s.width / dpr\n          let h = rlh + 1\n          // sx.fillStyle = bgs[row[0]]\n          // sx.fillRect(0, y, w, h)\n\n          sx.fillStyle = scheme.fg\n          let xstep = s.width / dpr / 4\n          for (let c = 0; c < 3; c++) {\n            let x = (c + 1) * xstep\n            let w = (row[c + 2] / 100) * xstep - cw\n            sx.fillRect(x, y, w, h)\n          }\n        }\n\n        let icon = icon_ref.current\n        let ix = icon.getContext('2d')\n        ix.clearRect(0, 0, cw, rlh)\n        let step = (rlh * 1.5) / 4\n        for (let i = 0; i < rank_rows.length; i++) {\n          let row = rank_rows[i]\n          let panel = panels[row[0]]\n          let y = i * step\n          let w = (panel[4] / 100) * cw\n          ix.fillStyle = bgs[row[0]]\n          ix.fillRect(0, y, w, step)\n        }\n      }\n    }\n  }, [data, frame])\n\n  useEffect(() => {\n    let dpr = window.devicePixelRatio || 1\n    setDpr(dpr)\n\n    let p = pref.current\n    let pspace = p.offsetWidth\n    let pleft = p.offsetLeft\n    setPspace(pspace)\n    setPleft(pleft)\n\n    // get data\n    fetch('sampled.json')\n      .then(r => r.json())\n      .then(_data => {\n        setData(_data)\n      })\n  }, [])\n\n  return (\n    <div>\n      <div style={{ paddingLeft: '1ch', paddingRight: '1ch' }}>\n        <div ref={pref} />\n      </div>\n      <div\n        style={{\n          background: '#bbb',\n          height: rlh,\n          position: 'sticky',\n          top: 0,\n          zIndex: 999,\n        }}\n      >\n        <div\n          ref={topbar_ref}\n          style={{\n            display: 'flex',\n            paddingLeft: '2ch',\n          }}\n        >\n          <canvas\n            ref={icon_ref}\n            style={{\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              height: rlh,\n              width: '1ch',\n            }}\n          />\n          <div\n            style={{\n              position: 'relative',\n              marginRight: '1ch',\n            }}\n          >\n            BLIP\n          </div>\n          <button style={{}}>Info</button>\n        </div>\n      </div>\n      {data ? (\n        <div>\n          <div\n            style={{\n              paddingLeft: '1ch',\n              paddingRight: '1ch',\n              marginTop: rlh / 2,\n              display: 'flex',\n            }}\n          >\n            <div>CONNECTIONS</div>\n            <div style={{ marginLeft: '1ch' }}>\n              <span style={{ color: '#777' }}>{frame}</span>\n            </div>\n          </div>\n          <div style={{ width: '100%', overflow: 'auto' }}>\n            <div style={{ width: '100%', minWidth: 6 * 19 + 1 + 'ch' }}>\n              <div\n                style={{\n                  display: 'flex',\n                  paddingRight: '1ch',\n                  paddingLeft: '1ch',\n                }}\n              >\n                {key_des.map((k, i) => (\n                  <div\n                    style={{\n                      display: 'flex',\n                      paddingLeft: '1ch',\n                      flexGrow: 1,\n                    }}\n                    title={k[0] + ': ' + k[2]}\n                  >\n                    <div\n                      style={{\n                        width: '5ch',\n                        overflow: 'hidden',\n                        textAlign: 'right',\n                        fontStyle: 'italic',\n                      }}\n                    >\n                      {k[1]}\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div\n                style={{\n                  paddingRight: '1ch',\n                  height: rlh * termheight,\n                  background: scheme.bg,\n                  background: '#433142',\n                  color: scheme.fg,\n                }}\n              >\n                {data.data\n                  .slice(Math.max(frame - termheight, 0), frame)\n                  .reverse()\n                  .map((d, i) => (\n                    <div\n                      key={frame + (termheight - i) - termheight}\n                      style={{\n                        position: 'relative',\n                        display: 'flex',\n                        paddingLeft: '1ch',\n                        // background:\n                        //   i !== 0 ? (d[19] ? red : scheme.bg) : scheme.bg,\n                      }}\n                    >\n                      <div\n                        style={{\n                          position: 'absolute',\n                          top: rlh / 2 - (size + 1) / 2 - 1,\n                          left: cw / 2 - (size + 1) / 2 + cw,\n                          height: size + 1,\n                          width: size + 1,\n                          background: d[19] ? red : scheme.bg,\n                        }}\n                      />\n                      {d.slice(0, 19).map((d, j) => (\n                        <div\n                          style={{\n                            display: 'flex',\n                            paddingLeft: '1ch',\n                            flexGrow: 1,\n                            position: 'relative',\n                          }}\n                        >\n                          <div\n                            style={{\n                              width: '5ch',\n                              overflow: 'hidden',\n                              textAlign: 'right',\n                            }}\n                          >\n                            {j === 0\n                              ? frame + (termheight - i) - termheight\n                              : d}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ))}\n              </div>\n            </div>\n          </div>\n          <div\n            style={{\n              paddingLeft: '1ch',\n              paddingRight: '1ch',\n              marginTop: rlh / 2,\n            }}\n          >\n            STRATEGIES\n          </div>\n          <div\n            ref={ranklabel_ref}\n            style={{\n              marginLeft: '1ch',\n              fontStyle: 'italic',\n              display: 'flex',\n            }}\n          >\n            <div style={{ width: '100%' }}>Ranking</div>\n            {[\n              ['Accuracy', '(TP+TN)/ALL'],\n              ['Precision', 'TP/(TP+FP)'],\n              ['Recall', 'TP/(TP+FN)'],\n            ].map(n => (\n              <div style={{ width: '100%' }}>\n                {n[0]}{' '}\n                <span style={{ color: scheme.light, fontStyle: 'normal' }}>\n                  {n[1]}\n                </span>\n              </div>\n            ))}\n          </div>\n          <div\n            style={{\n              position: 'relative',\n            }}\n          >\n            <canvas\n              style={{ position: 'absolute', left: '1ch', top: 0 }}\n              ref={sref}\n            />\n            <div ref={rankref} style={{ position: 'relative' }}>\n              {names.map((n, i) => (\n                <div style={{ display: 'flex' }}>\n                  {[...Array(4)].map((n, j) => (\n                    <div style={{ width: '100%' }}>\n                      <span\n                        style={{\n                          display: 'inline-block',\n                          marginRight: '0.5ch',\n                          paddingLeft: '0.5ch',\n                          paddingRight: '0.5ch',\n                        }}\n                      ></span>\n                      <span style={{ color: scheme.light }}></span>\n                    </div>\n                  ))}\n                </div>\n              ))}\n            </div>\n          </div>\n          <div\n            style={{\n              paddingLeft: '1ch',\n              paddingRight: '1ch',\n              marginTop: rlh / 2,\n            }}\n          >\n            VISUALIZED\n          </div>\n\n          <div style={{ position: 'relative' }}>\n            <canvas ref={vref} style={{ left: 0, top: 0 }} />\n            <canvas ref={href} style={{ left: 0, top: 0 }} />\n            <div\n              style={{ position: 'absolute', left: 0, top: 0 }}\n              ref={title_ref}\n            >\n              {names.map((n, i) => (\n                <div\n                  style={{\n                    background: bgs[i],\n                    paddingLeft: '0.5ch',\n                    paddingRight: '0.5ch',\n                  }}\n                >\n                  {n}\n                </div>\n              ))}\n            </div>\n            <div\n              style={{\n                position: 'absolute',\n                left: 0,\n                top: 0,\n              }}\n              ref={readout_ref}\n            >\n              {[...Array(4)].map(() => (\n                <div style={{ display: 'flex' }}>\n                  {[\n                    ['True Pos', red],\n                    ['False Pos', black],\n                    ['True Neg', black],\n                    ['False Neg', red],\n                  ].map((o, i) => (\n                    <div\n                      style={{ width: '100%', marginLeft: i === 2 ? '1ch' : 0 }}\n                    >\n                      <div\n                        style={{\n                          background: scheme.fg,\n                          fontStyle: 'italic',\n                        }}\n                      >\n                        {o[0]}\n                      </div>\n                      <div\n                        style={{\n                          background: o[1],\n                          height: rlh,\n                          color: 'white',\n                          textAlign: 'right',\n                          paddingRight: '1ch',\n                        }}\n                      ></div>\n                    </div>\n                  ))}\n                </div>\n              ))}\n            </div>\n            <div\n              ref={truthtitle_ref}\n              style={{\n                position: 'absolute',\n              }}\n            >\n              <div style={{}}>DATA BALANCE</div>\n            </div>\n            <div\n              ref={treadout_ref}\n              style={{\n                position: 'absolute',\n                display: 'flex',\n              }}\n            >\n              <div style={{ width: '100%' }}>\n                <div style={{ fontStyle: 'italic' }}>Anomalies</div>\n                <div\n                  style={{\n                    color: 'white',\n                    paddingLeft: '1ch',\n                    textAlign: 'left',\n                  }}\n                ></div>\n              </div>\n              <div style={{ width: '100%' }}>\n                <div style={{ fontStyle: 'italic', textAlign: 'right' }}>\n                  Normal\n                </div>\n                <div\n                  style={{\n                    color: 'white',\n                    paddingRight: '1ch',\n                    textAlign: 'right',\n                  }}\n                ></div>\n              </div>\n            </div>\n          </div>\n          <div\n            style={{\n              paddingLeft: '1ch',\n              paddingRight: '1ch',\n              marginTop: rlh / 2,\n              textAlign: 'center',\n              marginBottom: rlh + rlh,\n            }}\n          >\n            Blip is an anomaly detection prototype by{' '}\n            <a href=\"#\">Cloudera Fast Forward</a>.\n          </div>\n          <div\n            style={{\n              position: 'fixed',\n              left: 0,\n              bottom: 0,\n              right: 0,\n              height: rlh,\n              background: '#bbb',\n              paddingLeft: '1ch',\n              display: 'flex',\n            }}\n          >\n            <div\n              style={{\n                display: 'flex',\n              }}\n            >\n              <div>Speed:</div>\n              <button\n                style={{\n                  paddingLeft: '0.25ch',\n                  paddingRight: '0.25ch',\n                  marginLeft: '0.5ch',\n                }}\n                onClick={() => {\n                  if (speed > 0) {\n                    setSpeed(speed - 1)\n                  }\n                }}\n              >\n                {'<'}\n              </button>\n              {'123456'.split('').map((n, i) =>\n                i == speed ? (\n                  <div\n                    style={{\n                      paddingLeft: '0.25ch',\n                      paddingRight: '0.25ch',\n                    }}\n                  >\n                    {n}\n                  </div>\n                ) : (\n                  <button\n                    onClick={() => {\n                      setSpeed(i)\n                    }}\n                    style={{\n                      paddingLeft: '0.25ch',\n                      paddingRight: '0.25ch',\n                      color: scheme.light,\n                    }}\n                  >\n                    {n}\n                  </button>\n                )\n              )}\n              <button\n                style={{\n                  paddingLeft: '0.25ch',\n                  paddingRight: '0.25ch',\n                }}\n                onClick={() => {\n                  if (speed < speeds.length - 1) {\n                    setSpeed(speed + 1)\n                  }\n                }}\n              >\n                {'>'}\n              </button>\n            </div>\n            <button\n              style={{ marginLeft: '2ch' }}\n              onClick={() => {\n                if (pause) {\n                  setPause(false)\n                } else {\n                  setPause(true)\n                }\n              }}\n            >\n              {pause ? 'Play' : 'Pause'}\n            </button>\n          </div>\n        </div>\n      ) : (\n        <div>loading...</div>\n      )}\n      <style global jsx>{`\n        @font-face {\n          font-family: 'custom';\n          src: url('/fonts/IBMPlexMono-Regular.woff2') format('woff2'),\n            url('/fonts/IBMPlexMono-Regular.woff') format('woff');\n        }\n        @font-face {\n          font-family: 'custom';\n          src: url('/fonts/IBMPlexMono-Italic.woff2') format('woff2'),\n            url('/fonts/IBMPlexMono-Italic.woff') format('woff');\n          font-style: italic;\n        }\n        * {\n          box-sizing: border-box;\n        }\n        html {\n          font-family: 'custom', sans-serif;\n          font-size: ${fs}px;\n          line-height: ${lh};\n          background: #ddd;\n          color: #000;\n          overflow-x: hidden;\n        }\n        body {\n          margin: 0;\n          padding: 0;\n        }\n        canvas {\n          display: block;\n        }\n        h1,\n        h2,\n        h3,\n        h4,\n        h5,\n        h6 {\n          margin: 0;\n          font-size: inherit;\n          line-height: inherit;\n          font-weight: normal;\n        }\n        p {\n          margin: 0;\n          margin-top: ${rlh}px;\n        }\n        img {\n          display: block;\n          width: 100%;\n        }\n        a {\n          color: inherit;\n        }\n        a:hover {\n          opacity: 0.8;\n        }\n        #__next-prerender-indicator {\n          display: none;\n        }\n        button {\n          font-family: inherit;\n          color: inherit;\n          text-decoration: underline;\n          background: none;\n          border: none;\n          padding: 0;\n          margin: 0;\n          cursor: pointer;\n        }\n      `}</style>\n    </div>\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAOA;AAEA;AAEA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AACA;AAqBA;AACA;AAvBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AA0BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;AAKA;AACA;AAOA;AAKA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AAOA;AAHA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AApFA;AAAA;AAAA;AACA;AAoFA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA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","sourceRoot":""}